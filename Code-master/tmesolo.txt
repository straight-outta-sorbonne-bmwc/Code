
#Exercice 1:

#Question 1 dans arene:
self.r=self.can.create_polygon(self.robot.a[0],self.robot.a[1],self.robot.b[0],self.robot.b[1],self.robot.c[0],self.robot.c[1],self.robot.d[0],self.robot.d[1],fill="#FF1493")
#Question 2 dans arene:
self.trace=self.can.create_line(self.robot.x, self.robot.y, self.robot.x + 1 , self.robot.y + 1, arrow='last', fill='#606060')

#Exercice 2:

#Question 1:
class strategie_triangle_equi:
	def __init__(self,robot,vitesse):
		self.robot=robot
		self.vitesse=vitesse
		self.liste=[strategie_avance(200,self.robot,self.vitesse),strategie_tourner_droite(120,self.robot,self.vitesse)]
		self.nb_tour=0
		
	def start(self):
		self.liste[self.nb_tour%2].start()

	def update(self):
		if self.stop():
			return
		
		if self.liste[self.nb_tour%2].stop():
			self.nb_tour+=1
			self.liste[self.nb_tour%2].start()
		
		else:
			self.liste[self.nb_tour%2].update()

	def stop(self):
		return self.nb_tour>=10

#Question 2:

class strategie_polygone:
	def __init__(self,robot,vitesse,n):
		self.robot=robot
		self.vitesse=vitesse
		self.n=n
		self.liste=[strategie_avance(30,self.robot,self.vitesse),strategie_tourner_droite(360/n,self.robot,self.vitesse)]
		print((self.n-2)*math.pi/self.n)
		self.nb_tour=0
		
	def start(self):
		self.liste[self.nb_tour%2].start()

	def update(self):
		if self.stop():
			return
		
		if self.liste[self.nb_tour%2].stop():
			self.nb_tour+=1
			self.liste[self.nb_tour%2].start()
		
		else:
			self.liste[self.nb_tour%2].update()

	def stop(self):
		return self.nb_tour>=self.n*2

#Question 3:
class strategie_mur:
	def __init__(self,robot,vitesse):
		self.robot=robot
		self.vitesse=vitesse
		self.liste=[strategie_avance(1,self.robot,self.vitesse),strategie_tourner_droite(90,self.robot,self.vitesse)]
		self.nb_tour=0

	def start(self):
		self.liste[0].start()

	def update(self):
		if self.stop():
			return
	
		if self.liste[self.nb_tour%2].stop() :#and (self.robot.x>=800 or self.robot.x<=0 or self.robot.y>=800 or self.robot.y<=0):
			if (self.robot.x>=910 or self.robot.x<=0 or self.robot.y>=910 or self.robot.y<=0):
				self.nb_tour+=1
				self.liste[self.nb_tour%2].start()
			else:
				if self.nb_tour%2 == 0:
					self.liste[self.nb_tour].start()
	
		else:
			self.liste[self.nb_tour%2].update()
		print(self.robot.x)

	def stop(self):
		return self.nb_tour>=5
